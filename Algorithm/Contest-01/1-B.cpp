/*
B (1 балл). Язык гиппогрифов

Ограничение времени	1 секунда
Ограничение памяти	256.0 Мб
Ввод	стандартный ввод или input.txt
Вывод	стандартный вывод или output.txt

Хагрид обожает различных магических существ, одним из его любимцев является
Клювокрыл - гиппогриф (полуконь-полугрифон, при этом грифон сам сочетает в себе
черты льва и орла). На третьем году обучения у учеников Хогвартса есть предмет
"Уход за магическими существами", и вот настал первый урок, когда этот предмет
будет вести Хагрид.

Если вы думаете, что Хагрид не готовился к этому уроку, то вы максимально не
правы! Он долго изучал язык гиппогрифов и выяснил, что он в основном состоит из
трех гласных (на письме Хагрид решил обозначать их круглыми, квадратными и
фигурными скобками) и двух тонов: повышающийся, обозначается на письме тем, что
соответствующая гласной скобка будет открывающей, и понижающийся - скобка
будет закрывающейся. Также Хагрид выяснил, что перед попыткой напасть на
какую-либо цель, гиппогрифы издают яростный крик, при этом только крик, чье
написание по методике Хагрида будет образовывать правильную скобочную
последовательность, является яростным.

Хагрид хоть и человек большой души, но может банально не успеть транскрибировать
все звуки, издаваемые Клювокрылом, а это может сказаться непоправимо на здоровье
одного хорохорящегося блондина.

Формат ввода
Дан транскрибированный по методике выше крик Клювокрыла. Гарантируется, что его
длина не превышает 10^5 символов.

Формат вывода
Выведите YES, если крик Клювокрыл свидетельствует о начале нападения, и NO –
иначе.
*/

#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")
#pragma GCC optimize("no-stack-protector")

#include <iostream>

bool IsAttacking(std::string& str) {
  std::string possible_symbols = "(){}[]";

  std::string opened;
  for (size_t i = 0; i < str.length(); ++i) {
    for (size_t j = 0; j < 6; j += 2) {
      if (str[i] == possible_symbols[j]) {
        opened.push_back(str[i]);
      } else if (str[i] == possible_symbols[j + 1]) {
        if (opened.empty() || opened.back() != possible_symbols[j]) {
          return false;
        }

        opened.pop_back();
      }
    }
  }

  return opened.empty();
}

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(0), std::cout.tie(0);

  std::string str;
  std::cin >> str;

  if (IsAttacking(str)) {
    std::cout << "YES";
  } else {
    std::cout << "NO";
  }

  return 0;
}
