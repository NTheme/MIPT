/*
D (3 балла, с ревью). Миссия с самолетиком

Ограничение времени	0.5 секунд
Ограничение памяти	256Mb
Ввод	стандартный ввод или input.txt
Вывод	стандартный вывод или output.txt

Надеюсь, вы все проходили миссию с самолетиком в GTA SA. Так или иначе, она
считается одной из труднейших. Вам предстоит узнать, падение с какой высоты
самолётик переживет. Известно, что если его уронить с высоты не меньшей (больше
или равной) x (x — целое число от 1 до n) метров, то он разобьется, что вызовет
перезапуск миссии и ощущение всемирной несправедливости у играющего. Задача
осложняется тем, что вам предоставлено всего k образцов самолетика. Каждый
самолетик можно бросать сколько угодно раз, пока он не сломается; после этого
использовать его для экспериментов больше не удастся. Вы решили действовать так,
чтобы минимизировать максимально возможное количество экспериментов, которое
может потребоваться произвести. Чему равно это количество?

Формат ввода
В первой строке входного файла записаны через пробел два целых числа n и k —
максимальная высота для эксперимента и количество предоставленных самолетиков (1
≤ n ≤ 100000, 0 ≤ k < n).

Формат вывода
В выходной файл выведите единственное число — минимальное количество
экспериментов, которое потребуется совершить, чтобы узнать число x и
использовать не более k самолетиков. Если решить задачу невозможно, выведите
вместо этого −1.
*/

#include <algorithm>
#include <iostream>
#include <vector>

long long GetMinAttepmt(long long n, long long k) {
  if (k == 0) {
    if (n == 1) {
      return 0;
    }
    return -1;
  }

  std::vector<std::vector<long long>> dp(k + 1, std::vector<long long>(1, 1));
  for (long long fall = 1; dp[k][fall - 1] < n; ++fall) {
    dp[0].push_back(1);
    dp[1].push_back(fall + 1);
    for (long long plane = 2; plane <= k; ++plane) {
      dp[plane].push_back(dp[plane][fall - 1] + dp[plane - 1][fall - 1]);
    }
  }

  return dp[k].size() - 1;
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(nullptr);
  std::cout.precision(20);

  long long n, k;
  std::cin >> n >> k;
  std::cout << GetMinAttepmt(n, k) << '\n';

  return 0;
}
